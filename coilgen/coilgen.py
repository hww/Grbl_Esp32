#!/usr/bin/python
#
# Copyright (c) 2010 MakerBot Industries
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
"""Coil Winder Script

Generates GCode which will control your coil winding bot to make you coils!

Usage: python gcoil-winder.py [options]

Options:
  -h, --help    show this help
  --awg         the AWG of the wire you're winding.  we'll estimate your wire wdiam based on this. default = 28
  --wdiam       wirer's external wdiam (include insulation)
  --length	the length of the coil you'd like to make in millimeters. default = 25mm
  --turns   	the number of windings you would like. default = 1000
  --rpm	        the Y axis feedrate in mm/min.  default = 30
  --idiam       coil internal diameter
"""

from math import *
import sys
import getopt

class CoilWinder:
	"Class to handle generating frosting code."
	def __init__(self, awg, length, turns, rpm, wdiam, idiam):

		self.wdiamsInMM = {
			14:	1.70053,
			15:	1.51765,
			16:	1.35636,
			17:	1.21412,
			18:	1.08585,
			19:	0.97028,
			20:	0.86995,
			21:	0.77724,
			22:	0.69469,
			23:	0.62484,
			24:	0.56007,
			25:	0.50038,
			26:	0.44831,
			27:	0.40386,
			28:	0.36195,
			29:	0.32512,
			30:	0.29083,
			31:	0.26162,
			32:	0.23749,
			33:	0.21209,
			34:	0.18796,
			35:	0.16764,
			36:	0.15113,
			37:	0.13589,
			38:	0.12065,
			39:	0.10541,
			40:	0.09398,
			41:	0.08509,
			42:	0.0762,
			43:	0.06731,
			44:	0.06096,
			45:	0.053213,
			46:	0.048387,
			47:	0.043815,
			48:	0.038989,
			49:	0.035179,
			50:	0.032385
		};
		self.method = 1;
		self.awg = awg;
		self.length = length;
		self.turns = turns;
		self.rpm = rpm;
		self.idiam = idiam;
		self.wdiam = wdiam;
		if (wdiam == 0.0):
			self.wdiam = self.wdiamsInMM[self.awg];
		else:
			best_diff = 1000
			best_awg = 0
			for awg_, dia_ in self.wdiamsInMM.items():
				diff = abs(dia_ - self.wdiam);
				if (diff < best_diff):
					best_diff = diff;
					best_awg = awg_;
			self.awg = best_awg;
		self.turnsPerRow = floor(self.length / self.wdiam);
		self.maxTurns = self.turnsPerRow * ceil(self.turns / self.turnsPerRow);
		self.minTurns = self.turnsPerRow * floor(self.turns / self.turnsPerRow);
		self.layers = ceil(self.turns / self.turnsPerRow);

	def generate(self):
		direction = 1;
		posx = 0.0;
		layer = 1;

		"Generate the actual GCode"
		# Generate a file header
		print("(Generated by coilgen.py)");
		print("(Coil winding process)");
		print("(Args:", " ".join(sys.argv), ")");
		print("(Units: X mm, Y rotations)");
		print("(Feed rate RPM: %0.2f)" % (self.rpm));
		print("(Coil Length: %0.2fmm)" % (self.turnsPerRow * self.wdiam));
		print("(Wire AWG: %d)" % (self.awg));
		print("(Wire Wdiam: %.3fmm)" % (self.wdiam));
		print("(Total Windings: %d)" % (self.turns));
		print("(Turns per layer: %d)" % (self.turnsPerRow));
		print("(Layers: %d)" % (self.layers));
		print("(Coil internal diameter %.3fmm)" % (self.idiam));
		print("(Coil external diameter %.3fmm)" % (self.idiam + self.layers * self.wdiam * 2.0));

		if (self.minTurns == self.maxTurns):
			if (self.minTurns % 2 == 0):
				print("(Winding will start and stop at same end.)");
			else:
				print("(Winding will start and stop at opposite ends.)");
		else:
			print("(Warning: winding will stop in the middle of the coil.)");
			if (self.minTurns % 2 == 0):
				print("(Smaller: %d, %d layers, start/stop on same end.)" % (self.minTurns, self.minTurns / self.turnsPerRow))
				print("(Larger: %d, %d layers, start/stop on oppposite ends.)" % (self.maxTurns, self.maxTurns / self.turnsPerRow))
			else:
				print("(Smaller: %d, %d layers, start/stop on opposite ends.)" % (self.minTurns, self.minTurns / self.turnsPerRow))
				print("(Larger: %d, %d layers, start/stop on same end.)" % (self.maxTurns, self.maxTurns / self.turnsPerRow))
		print("G21 (metric ftw)");
		print("G90 (absolute mode)");
		print("G92 X0 Y0 (zero all axes)");

		the_first_row = 1;

		for i in range(self.turns):

			is_first = ((i) % self.turnsPerRow == 0);
			is_last = ((i+1) % self.turnsPerRow == 0);
			use_rpm = self.rpm;
			if (is_first or is_last):
				use_rpm *= 0.1;

			prevx = posx;
			if (direction == 1):
				posx += self.wdiam;
			else:
				posx -= self.wdiam;

			if (self.method == 1):
				# strait fraction of turn
				frac1 = 0.8
				# angular fraction of turn
				frac2 = 1.0 - frac1
				# turn pitch
				stepx = posx - prevx
				# straight len
				dist1 = frac1
				# turned len
				dist2 = sqrt(stepx * stepx + frac2 * frac2)
				ratio = dist1 / dist2

				# display current turn and layer on LCD
				print("(T: %d L: %d)" % (i+1, layer))
				# Make direct part of turn
				print("G1 X%.3f Y%.3f F%.2f" % (prevx, i+frac1, use_rpm))

				# Check if last turn of the coil
				if (is_last):
					# Complete turn straght
					print("G1 X%.3f Y%.3f F%.2f" % (prevx,  i+1,    use_rpm))
					# Change direction
					direction = direction ^ 1;
					layer+=1;
					posx = prevx;
					# Pause
					if (the_first_row == 1):
						print("M0 (pause)");
						the_first_row = 0;
				else:
					# Complete turn curved
					print("G1 X%.3f Y%.3f F%.2f" % (posx,  i+1,    use_rpm * ratio))
			else:
				print("G1 X%.3f Y%d F%.2f" % (posx, i+1, use_rpm))
				# display current turn and layer on LCD
				print("(T: %d L: %d)" % (i+1, layer))

				if ((i+1) % self.turnsPerRow == 0):
					direction = direction ^ 1;
					layer+=1;
					print("M0 (pause)");
		print("(Complete!)")
		#print("M18 (drives off)")
		#print("M127")


def main(argv):

	try:
		opts, args = getopt.getopt(argv, '', [
			'help',
			'awg=',
			'length=',
			'turns=',
			'rpm=',
			'wdiam=',
			'idiam='
		])
	except getopt.GetoptError:
		usage()
		sys.exit(2)

	awg = 24;
	length = 10.0;
	turns = 100;
	rpm = 30.0;
	wdiam = 0.0;
	idiam = 5.0;

	for opt, arg in opts:
		if opt in ("-h", "--help"):
			usage()
			sys.exit()
		else:
			if opt in ("--awg"):
				awg = int(arg)
			elif opt in ("--wdiam"):
				wdiam = float(arg)
		if opt in ("--length"):
			length = float(arg)
		if opt in ("--turns"):
			turns = int(arg)
		if opt in ("--rpm"):
			rpm = float(arg)
		if opt in ("--idiam"):
			idiam = float(arg)
	winder = CoilWinder(awg, length, turns, rpm, wdiam, idiam)
	winder.generate()

def usage():
	print(__doc__)

if __name__ == "__main__":
	main(sys.argv[1:])
